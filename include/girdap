#ifndef GIRDAP
#define GIRDAP

#include <cmath>
#include <iostream>
#include <vector>
#include <map>
#include <initializer_list>
#include <algorithm>

using namespace std; 

typedef unsigned long long uint_16;  
typedef unsigned long uint_8; 
typedef unsigned int uint_4; 
typedef unsigned short uint_2;
typedef long long int_16; 
typedef long int_8; 
typedef int int_4; 
typedef short int_2; 

// ALMOST EQUAL 
template<class T>
typename std::enable_if<!std::numeric_limits<T>::is_integer, bool>::type
    almost_equal(T x, T y, int ulp)
{
    return std::abs(x-y) < std::numeric_limits<T>::epsilon() * std::abs(x+y) * ulp  
    || std::abs(x-y) < std::numeric_limits<T>::min();
}


#include "grid/Grid.hpp"
#include "grid/Block1.hpp"

#endif